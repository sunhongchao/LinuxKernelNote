嵌入式系统启动：
1、bootloader
2、linux 内核
3、挂接根文件系统
4、运行应用程序

uboot 补丁文件：
diff -urN u-boot-1.1.6/board/100ask24x0/boot_init.c u-boot-1.1.6_jz2440/board/100ask24x0/boot_init.c
--- u-boot-1.1.6/board/100ask24x0/boot_init.c	1970-01-01 07:00:00.000000000 +0700
+++ u-boot-1.1.6_jz2440/board/100ask24x0/boot_init.c	2010-11-26 12:54:37.042080086 +0800
-34，6 +34 8
---表示修改前的文件，+++表示的是修改后的文件
diff显示着两个文件的差别
-34，6表示是原来的代码从34行开始共6行
+34， 8 表示修改后的代码也是从34行开始共8行
-代表原来的代码，需要去掉，+代表添加的代码
 -       ulong offset = 0;
 +    ulong offset = 0;
 
 uboot打补丁:  
$ tar xjf u-boot-1.1.6.tar.bz2
$ cd u-boot-1.1.6
$ patch -p1 < ../u-boot-1.1.6_jz2440.patch
$ make 100ask24x0_config
$ make
uboot 命令
print 打印环境变量信息
set bootdalay 设定倒数计时
save  



如何开始分析uboot，从哪开始：配置时需要执行make smdk2410_config。因此从smdk2410_config开始
uboot 的配置	make smdk2410_config
打开uboot Makefile,搜索	smdk2410_config
smdk2410_config :       unconfig
        @$(MKCONFIG) $(@:_config=) arm arm920t smdk2410 NULL s3c24x0
下一行添加 100ask24x0_config
100ask24x0_config: unconfig
        @$(MKCONFIG) $(@:_config=) arm arm920t 100ask24x0 NULL s3c24x0
        
搜索 MKCONFIG 找到MKCONFIG	:= $(SRCTREE)/mkconfig，SRCTREE即是uboot
的根目录，下面有一个mkconfig的脚本
$(@:_config=) @表示目标，即100ask24x0_config。_config=是用空格替换_config。$(@:_config=)就是100ask24x0
@$(MKCONFIG) $(@:_config=) arm arm920t 100ask24x0 NULL s3c24x0
mkconfig 				100ask24x0 arm arm920t 100ask24x0 NULL s3c24x0
Mkconfig脚本：
$0表示传入的第一个参数mkconfig ,$#表示参数的个数，-lt 少于；-gt大于[]表示如果。&&表示接着执行.exit 1非正常退出程序。
[ $# -lt 4 ]&& exit 1 意思就是如果参数个数小于4，接着执行exit 1.
[ "${BOARD_NAME}" ] || BOARD_NAME="$1"如果BOARD_NAME为空就BOARD_NAME="$1"赋值为1.
		$0
100ask24x0 arm arm920t 100ask24x0 NULL s3c24x0


	cd ./include  
	rm -f asm    //删除原来的asm文件
	ln -s asm-$2 asm  
	//即ln -s asm-arm asm，建立新的连接文件asm指向asm-arm。那么在头文件#include </asm/> 中的asm就会替换成asm-arm
	//为什么这么做呢?因为内核文件是所有架构共享的，不能编译一次就更改一次头文件。因此编译时自动替换。	
	
	ln -s ${LNPREFIX}arch-$6 asm-$2/arch
	// ${LNPREFIX}=""  即建立asm-arm/arch连接文件指向arch-s3c24x0
即	ln -s arch-s3c24x0  asm-arm/arch
	
	ln -s ${LNPREFIX}proc-armv asm-$2/proc
	即ln -s proc-armv asm-arm/proc
	
	/* >表示追加内容到config.mk，如果不存在就 新建一个文件。>>表示追加内容config.mk
	前面已经切换到Include目录下，因此inclue/config.mk文件内容如下
	*/
	echo "ARCH   = $2" >  config.mk  //ARCH   = arm
	echo "CPU    = $3" >> config.mk  // CPU    = arm920t 
	echo "BOARD  = $4" >> config.mk  //BOARD  = 100ask24x0
	echo "SOC    = $6" >> config.mk  // SOC    = s3c24x0
	> config.h
	echo "/* Automatically generated - do not edit */" >>config.h
	echo "#include <configs/$1.h>" >>config.h
分析编译过程：
make 开始
 117 include $(OBJTREE)/include/config.mk//mkconfig里面生成的文件
 169 iOBJS  = cpu/$(CPU)/start.o//从cpu/arm920t/start.c开始编译
 194 LIBS += board/$(BOARDDIR)/lib$(BOARD).a //LIBS += board/100ask24x0/lib100ask24x0.a
 195 LIBS += cpu/$(CPU)/lib$(CPU).a//LIBS += cpu/arm920t/libarm920t.a
 //.a即是某文件夹下的所有文件打包成.a文件
 
 239 ALL = $(obj)u-boot.srec $(obj)u-boot.bin $(obj)System.map $(U_BOOT_NAND)
 240 
 241 all:            $(ALL)  //make 时执行此处
 			ALL=$(obj)u-boot.bin //就是生成的文件
 249 $(obj)u-boot.bin:       $(obj)u-boot
 262 $(obj)u-boot:           depend version $(SUBDIRS) $(OBJS) $(LIBS) $(LDSCRIPT)
 263                 UNDEF_SYM=`$(OBJDUMP) -x $(LIBS) |sed  -n -e 's/.*\(__u_boot_cmd_.*\)/-u\1/p'|     sort|uniq`;\
 264                 cd $(LNDIR) && $(LD) $(LDFLAGS) $$UNDEF_SYM $(__OBJS) \
 265                         --start-group $(__LIBS) --end-group $(PLATFORM_LIBS) \
 266                         -Map u-boot.map -o u-boot
 
 通过执行make命令查看输出信息：
 UNDEF_SYM=`arm-linux-objdump -x lib_generic/libgeneric.a board/100ask24x0/lib100ask24x0.a 
 cpu/arm920t/libarm920t.a cpu/arm920t/s3c24x0/libs3c24x0.a lib_arm/libarm.a fs/cramfs/
 libcramfs.a fs/fat/libfat.a fs/fdos/libfdos.a fs/jffs2/libjffs2.a fs/reiserfs/libreiserfs.a 
 fs/ext2/libext2fs.a net/libnet.a disk/libdisk.a rtc/librtc.a dtt/libdtt.a drivers/libdrivers.a 
 drivers/nand/libnand.a drivers/nand_legacy/libnand_legacy.a drivers/usb/libusb.a drivers
 /sk98lin/libsk98lin.a common/libcommon.a |sed  -n -e 's/.*\(__u_boot_cmd_.*\)
 /-u\1/p'|sort|uniq`;\
 
		cd /work/tools/u-boot-1.1.6 && arm-linux-ld -Bstatic -T /work/tools/u-boot-1.1.6
		/board/100ask24x0/u-boot.lds -Ttext 0x33F80000  $UNDEF_SYM cpu/arm920t/start.o \
			--start-group lib_generic/libgeneric.a board/100ask24x0/lib100ask24x0.a 
			cpu/arm920t/libarm920t.a cpu/arm920t/s3c24x0/libs3c24x0.a lib_arm/libarm.a 
			fs/cramfs/libcramfs.a fs/fat/libfat.a fs/fdos/libfdos.a fs/jffs2/libjffs2.a
			 fs/reiserfs/libreiserfs.a fs/ext2/libext2fs.a net/libnet.a disk/libdisk.a 
			 rtc/librtc.a dtt/libdtt.a drivers/libdrivers.a drivers/nand/libnand.a 
			 drivers/nand_legacy/libnand_legacy.a drivers/usb/libusb.a drivers/sk98lin/libsk98lin.a 
			 common/libcommon.a --end-group -L /work/tools/gcc-3.4.5-glibc-2.3.6/lib/gcc/arm-linux
			 /3.4.5 -lgcc \
			-Map u-boot.map -o u-boot


-Ttext 0x33F80000  内存从0x30000000开始，最高的512字节0x33F80000-0x33fffff=400000=512k。
uboot在内存的执行地址是0x33F80000。4K sram中把Uboot拷贝到内存。
连接文件放在 /board/100ask24x0 因为编译以板子为整体。
SECTIONS
{
	. = 0x00000000;//连接时加上0x33F80000。CONFIG_SYS_TEXT_BASE

	. = ALIGN(4);
	.text      :
	{
	  cpu/arm920t/start.o	(.text)   //将start.o	和boot_init.o放在代码的前面，它们需要先执行。
          board/100ask24x0/boot_init.o (.text)
	  *(.text)
	}

	. = ALIGN(4);
	.rodata : { *(.rodata) }

	. = ALIGN(4);
	.data : { *(.data) }

	. = ALIGN(4);
	.got : { *(.got) }

	. = .;
	__u_boot_cmd_start = .;
	.u_boot_cmd : { *(.u_boot_cmd) }
	__u_boot_cmd_end = .;

	. = ALIGN(4);
	__bss_start = .;
	.bss : { *(.bss) }
	_end = .;
}
------------------------------------------------------------------------------
uboot 实现功能
1、从flash上吧内核读到内存
		初始化时钟/内存/flash的读写
2、启动内核
		a 设置传递给内核的参数，在约定的地点放参数
		b 跳转执行
3、 烧写文件
		usb/网卡/串口
uboot启动流程		
1、设cpu为svc模式
2、关看门狗
3、关中断
4、设置时钟
5、关MMU和CACHE
6、设置内存控制器
7、拷贝uboot到内存，包括代码和数据，清bss段。只支持从Nor flash读取
8、设置堆和栈
9、跳转内存执行代码
uboot 1.6不支持nand启动。需要修改代码

uboot命令实现：
mtd 输出分区信息
OpenJTAG> ? nand 输出nand 帮助
uboot/common/main.c中int run_command (const char *cmd, int flag)
  /*分号隔开两个命令*/
  parse_line 
  	find_cmd
  在Uboot内搜索	.u_boot_cmd。找到
  #define Struct_Section  __attribute__ ((unused,section (".u_boot_cmd")))
  bootm 0x30007fc0 
  
  U_BOOT_CMD(
 	bootm,	CFG_MAXARGS,	1,	do_bootm,
 	"bootm   - boot application image from memory\n",//项与项之间逗号隔开
 	"[addr [arg ...]]\n    - boot application image stored in memory\n"
 	"\tpassing arguments 'arg ...'; when booting a Linux kernel,\n"
 	"\t'arg' can be the address of an initrd image\n"
	#ifdef CONFIG_OF_FLAT_TREE
	"\tWhen booting a Linux kernel which requires a flat device-tree\n"
	"\ta third argument is required which is the address of the of the\n"
	"\tdevice-tree blob. To boot that kernel without an initrd image,\n"
	"\tuse a '-' for the second argument. If you do not pass a third\n"
	"\ta bd_info struct will be passed instead\n"
#endif
);
搜索U_BOOT_CMD
#define U_BOOT_CMD(name,maxargs,rep,cmd,usage,help) \
cmd_tbl_t __u_boot_cmd_##name Struct_Section = {#name, maxargs, rep, cmd, usage, help}

cmd_tbl_t __u_boot_cmd_##name __attribute__ ((unused,section (".u_boot_cmd"))) = 
{bootm, CFG_MAXARGS, 1, do_bootm, usage, help}

usage="bootm   - boot application image from memory\n",
help=后面的帮助
命令结构体
typedef struct cmd_tbl_s	cmd_tbl_t;
struct cmd_tbl_s {
	char		*name;		/* Command Name			*/
	int		maxargs;	/* maximum number of arguments	*/
	int		repeatable;	/* autorepeat allowed?	命令是否可重复，enter重复上次命令	*/
					/* Implementation function	*/
	int		(*cmd)(struct cmd_tbl_s *, int, int, char * const []);
	char		*usage;		/* Usage message	(short)	短的帮助信息*/
#ifdef	CONFIG_SYS_LONGHELP
	char		*help;		/* Help  message	(long)长的帮助信息	*/
#endif
#ifdef CONFIG_AUTO_COMPLETE
	/* do auto completion on the arguments */
	int		(*complete)(int argc, char * const argv[], char last_char, int maxv, char *cmdv[]);
#endif
};
自己添加一个命令 cmd_hello.c
#include <common.h>
#include <watchdog.h>
#include <command.h>
#include <image.h>
#include <malloc.h>
#include <u-boot/zlib.h>
#include <bzlib.h>
#include <environment.h>
#include <lmb.h>
#include <linux/ctype.h>
#include <asm/byteorder.h>
#include <linux/compiler.h>
int do_hello(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
{
	printf("hello world\n");
	return 0;
}
U_BOOT_CMD(
	hello,CFG_MAXARGS,1,do_hello,
	"hello -just for test\n",
	"hello,this is long help for command hello...\n"
)
命令源文件都在common文件夹下，把代码保存到common目录下
修改common文件夹下的Makefile
COBJS	= main.o ..... cmd_hello.o

uboot启动内核 common/main.c
ldr	pc, _start_armboot  //start.s
_start_armboot:	.word start_armboot
跳转到第二阶段代码。启动内核
start_armboot
	main_loop
		s = getenv ("bootcmd");
		run_command (s, 0);
	而s=	bootcmd=nand read.jffs2 0x30007FC0 kernel; bootm 0x30007FC0
	相当于 =nand read.jffs2 0x30007FC0 0x00060000 0x00200000//kernel起始地址0x00060000
	
	uboot如何找到内核映像在nand中的存储地址的？通过内核分区信息表，下面
	
	将kernel分区读到0x30007FC0这个内存地址。跳转执行
分区设置：include/configs/100ask24x0.h	
	#define MTDIDS_DEFAULT "nand0=nandflash0"
#define MTDPARTS_DEFAULT "mtdparts=nandflash0:256k@0(bootloader)," \
                            "128k(params)," \
                            "2m(kernel)," \
                            "-(root)"
意思是前256k，bootloader空间，接下来128k params区，接下来的2m内核区，之后的是root区
nand read[.jffs2]     - addr off|partition size\n

nand的执行函数是do_nand
U_BOOT_CMD(nand, 5, 1, do_nand,//uboot输入nand命令就会执行do_nand函数
U_BOOT_CMD(bootm,	CFG_MAXARGS,	1,	do_bootm, 
//启动内核的命令，从nand中读取内核到sdram后，跳转执行
		
	内核地址是在0x30008000,0x30007FC0-0x30008000是64Bimage_header。里面包含了内核的加载地址
	和运行地址。内核加载地址是复制到内存时内核所在的地址。加载地址ih_load和运行不一致时，ubot会将
	内核复制到运行地址ih_ep。
	#define	CFG_LOAD_ADDR		0x33000000	/* default load address	与板架构相关，在smdk2410.h中设置*/
	加载地址有三个，内核Imageih_load,uboot配置的CFG_LOAD_ADDR，还有命令输入的bootm loadaddr
	memmove (&header, (char *)addr, sizeof(image_header_t));
	memmove ((void *) ntohl(hdr->ih_load), (uchar *)data, len);
	typedef struct image_header {
	uint32_t	ih_magic;	/* Image Header Magic Number	*/
	uint32_t	ih_hcrc;	/* Image Header CRC Checksum	*/
	uint32_t	ih_time;	/* Image Creation Timestamp	*/
	uint32_t	ih_size;	/* Image Data Size		*/
	uint32_t	ih_load;	/* Data	 Load  Address	内核加载到内存的地址	*/ub
	uint32_t	ih_ep;		/* Entry Point Address	跳转运行内核的地址	*/
	uint32_t	ih_dcrc;	/* Image Data CRC Checksum	*/
	uint8_t		ih_os;		/* Operating System		*/
	uint8_t		ih_arch;	/* CPU architecture		*/
	uint8_t		ih_type;	/* Image Type			*/
	uint8_t		ih_comp;	/* Compression Type		*/
	uint8_t		ih_name[IH_NMLEN];	/* Image Name		*/
} image_header_t;
启动内核函数：
do_bootm_linux  (cmdtp, flag, argc, argv,
			     addr, len_ptr, verify);


init_fnc_t *init_sequence[] = {
		board_init,
		dram_init,		
		.....
};
start_armboot 
for (init_fnc_ptr = init_sequence; *init_fnc_ptr; ++init_fnc_ptr) {
		if ((*init_fnc_ptr)() != 0) { //此处调用dram_init设置内存起始地址和大小
		}
	}			     
1、设置启动参数
2、跳到入口地址执行
theKernel = (void (*)(int, int, uint))ntohl(hdr->ih_ep);//入口地址
theKernel (0, bd->bi_arch_number, bd->bi_boot_params);//调用内核
bi_arch_number机器Id即是每一个CPU的ID
board_init()
	gd->bd->bi_arch_number = MACH_TYPE_SMDK2410;

设置参数：
在约定的地址，以约定的格式放置数据。100ask24x0 在3000100放置参数
do_bootm_linux
	setup_start_tag (bd);
	setup_memory_tags (bd);
	setup_commandline_tag (bd, commandline);
	setup_end_tag (bd);

setup_memory_tags (bd);


int dram_init (void)
{
	gd->bd->bi_dram[0].start = PHYS_SDRAM_1;
	gd->bd->bi_dram[0].size = PHYS_SDRAM_1_SIZE;

	return 0;
}
setup_commandline_tag (bd, commandline);
char *commandline = getenv ("bootargs");

uboot 的内存分布在linux开发完全手册260页有图
Uboot 第二阶段启动内核
board_init
	gd->bd->bi_arch_number = MACH_TYPE_SMDK2410;
	gd->bd->bi_boot_params = 0x30000100;
start_armboot:
	size = flash_init ();//norflash的识别和初始化
	nand_init();	
	env_relocate ()//获取环境变量
	main_loop ();
	s = getenv ("bootcmd");
	run_command (s, 0);
	len = readline (CFG_PROMPT);
	run_command (lastcommand, flag);//bootm命令
